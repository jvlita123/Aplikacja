<head>
    <script src="js/clmtrackr.js"></script>
    <style>
        .active-filter {
            background-color: mediumpurple;
            color: #fff;
        }

        input[type="color"] {
            width: 20px;
            height: 20px;
            padding: 25px;
            border-radius: 50%;
            background-color: mediumpurple;
        }

        input[type="color"]:hover {
            opacity: 0.8;
        }

        .filter-label {
            font-weight: bold;
            text-align: center;
            margin-bottom: 5px;
        }

        .filter-controls {
            display: flex;
            align-items: center;
        }

        .filter {
            margin-bottom: 20px;
        }

        .tg-wrap {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .filter-btn {
            border: none;
            margin: 5px;
            border-radius: 25px;
            cursor: pointer;
        }
    </style>
</head>
<div class="tg-wrap card" style="height:80vh">
    <table>
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th class="filter-label"></th>
                <th class="filter-label">Color</th>
                <th class="filter-label">Width</th>
                <th class="filter-label">Opacity</th>
                <th class="filter-label">Extension</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan="7" rowspan="4">
                    <div style="position: relative;">
                        <video id="inputVideo" width="500" height="400" autoplay></video>
                        <canvas id="drawCanvas" width="500" height="400" style="position: absolute; top: 0; left: 0;"></canvas>
                    </div>
                </td>
                <td id="eyelinerBtn" onclick="toggleFilter('eyeliner')">
                    <div class="btn-primary filter-btn" style="padding:10px;">
                        Eyeliner
                    </div>
                </td>
                <td><input type="color" id="eyelinerColorPicker" onchange="updateColor('eyeliner', this.value)"></td>
                <td><input class="form-range" type="range" id="eyelinerWidthSlider" min="1" max="10" value="2" onchange="updateLineWidth('eyeliner', this.value)"></td>
                <td><input class="form-range" type="range" id="eyelinerOpacitySlider" min="0" max="1" step="0.1" value="0.5" onchange="updateAlpha('eyeliner', this.value)"></td>
                <td><input class="form-range" type="range" id="eyelinerExtensionSlider" min="0" max="20" value="10" onchange="updateExtension('eyeliner', this.value)"></td>
            </tr>
            <tr>
                <td id="lipsBtn" class="filter-btn" onclick="toggleFilter('lips')">
                    <div class="btn-primary filter-btn" style="padding:10px;">
                        Lips
                    </div>
                </td>
                <td><input type="color" id="lipsColorPicker" onchange="updateColor('lips', this.value)"></td>
                <td><input class="form-range" type="range" id="lipsWidthSlider" min="1" max="10" value="2" onchange="updateLineWidth('lips', this.value)"></td>
                <td><input class="form-range" type="range" id="lipsOpacitySlider" min="0" max="1" step="0.1" value="0.5" onchange="updateAlpha('lips', this.value)"></td>
            </tr>
            <tr>
                <td id="shadoweyeBtn" class="filter-btn" onclick="toggleFilter('shadoweye')">
                    <div class="btn-primary filter-btn" style="padding:10px;">
                        Eye Shadow
                    </div>
                </td>
                <td><input type="color" id="shadoweyeColorPicker" onchange="updateColor('shadoweye', this.value)"></td>
                <td><input class="form-range" type="range" id="shadoweyeWidthSlider" min="1" max="10" value="2" onchange="updateLineWidth('shadoweye', this.value)"></td>
                <td><input class="form-range" type="range" id="shadoweyeOpacitySlider" min="0" max="1" step="0.1" value="0.5" onchange="updateAlpha('shadoweye', this.value)"></td>
                <td><input class="form-range" type="range" id="shadoweyeShadowSlider" min="0" max="20" value="10" onchange="updateShadowEye('shadoweye', this.value)"></td>
            </tr>
            <tr>
                <td id="blushBtn" class="filter-btn" onclick="toggleFilter('blush')">
                    <div class="btn-primary filter-btn" style="padding:10px;">
                        Blush
                    </div>
                </td>
                <td><input type="color" id="blushColorPicker" onchange="updateColor('blush', this.value)"></td>
                <td><input class="form-range" type="range" id="shadoweyeWidthSlider" min="1" max="10" value="2" onchange="updateLineWidth('blush', this.value)"></td>
                <td><input class="form-range" type="range" id="shadoweyeOpacitySlider" min="0" max="1" step="0.1" value="0.5" onchange="updateAlpha('blush', this.value)"></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>
<script type="text/javascript">
    var videoInput = document.getElementById('inputVideo');
    var canvasInput = document.getElementById('drawCanvas');
    var cc = canvasInput.getContext('2d');

    var filters = {
        eyeliner: {
            name: 'eyeliner',
            active: false,
            lineWidth: 1,
            color: 'black',
            alpha: 0.5,
            extension: 10
        },
        lips: {
            name: 'lips',
            active: false,
            lineWidth: 2,
            color: 'black',
            alpha: 0.5,
            extension: 10
        },
        shadoweye: {
            name: 'shadoweye',
            active: false,
            lineWidth: 4,
            color: '#ff0000',
            alpha: 0.5,
            extension: 10,
            shadowRadius: 1
        },
        blush: {
            name: 'blush',
            active: false,
            lineWidth: 4,
            color: '#ff0000',
            alpha: 0.5,
            extension: 10,
            shadowRadius: 1
        }
    };

    var ctracker = new clm.tracker();
    var currentFilters = [];

    var currentFilter = '';
    var currentLineWidth = 2;
    var currentColor = '#ff0000';
    var currentExtension = 10;
    var currentShadowRadius = 0;

    navigator.mediaDevices.getUserMedia({
        video: true
    })
        .then(function (stream) {
            videoInput.srcObject = stream;
            ctracker.init();
            ctracker.start(videoInput);
            drawLoop();
        })
        .catch(function (err) {
            console.error('Error:', err);
        });

    function drawLoop() {

        requestAnimationFrame(drawLoop);
        cc.lineWidth = 0.01;
        cc.clearRect(0, 0, canvasInput.width, canvasInput.height);
        ctracker.draw(canvasInput);

        var positions = ctracker.getCurrentPosition();
        if (positions) {
            for (var i = 0; i < currentFilters.length; i++) {
                if (currentFilters[i].name === 'eyeliner') {
                    var leftEyeIndices0 = [23, 23];
                    var leftEyeIndices1 = [23, 63];
                    var leftEyeIndices2 = [63, 24];
                    var leftEyeIndices3 = [24, 64];
                    var leftEyeIndices4 = [64, 25];

                    var rightEyeIndices1 = [30, 68];
                    var rightEyeIndices2 = [68, 29];
                    var rightEyeIndices3 = [29, 67];
                    var rightEyeIndices4 = [67, 28];
                    var rightEyeIndices5 = [28, 28];

                    var filter = findFilterByName('eyeliner');

                    function drawEyelid(points, lineWidth, currentExtension) {
                        cc.beginPath();
                        cc.moveTo(positions[points[0]][0], positions[points[0]][1]);
                        for (var i = 1; i < points.length; i++) {
                            if (positions[points[i]]) {
                                cc.lineTo(positions[points[i]][0] - currentExtension, positions[points[i]][1]);
                            }
                        }
                        cc.closePath();
                        cc.filter = "blur(0.8px)";
                        cc.strokeStyle = filter.color;
                        cc.lineWidth = filter.lineWidth;
                        cc.globalAlpha = filter.alpha;
                        cc.stroke();
                    }

                    drawEyelid(leftEyeIndices0, +3, filter.extension);
                    drawEyelid(leftEyeIndices1, +3, 0);
                    drawEyelid(leftEyeIndices2, +2, 0);
                    drawEyelid(leftEyeIndices3, +1, 0);
                    drawEyelid(leftEyeIndices4, 0);
                    drawEyelid(rightEyeIndices1, 0);
                    drawEyelid(rightEyeIndices2, +1, 0);
                    drawEyelid(rightEyeIndices3, +2, 0);
                    drawEyelid(rightEyeIndices4, +3, 0);
                    drawEyelid(rightEyeIndices5, +3, -filter.extension);

                } else if (currentFilters[i].name === 'lips') {
                    var upperMouth = [44, 45, 46, 47, 48, 49, 50, 59, 60, 61, 44];
                    var bottomMouth = [44, 55, 54, 53, 52, 51, 50, 58, 57, 56, 44];

                    var filter = findFilterByName('lips');
                    cc.fillStyle = filter.color;
                    cc.globalAlpha = filter.alpha;
                    cc.strokeStyle = filter.color;
                    cc.lineWidth = filter.lineWidth;

                    function drawMouth(points) {
                        cc.beginPath();
                        cc.filter = 'blur(1px)';
                        cc.moveTo(positions[points[0]][0], positions[points[0]][1]);
                        for (var i = 1; i < points.length; i++) {
                            if (positions[points[i]]) {
                                cc.lineTo(positions[points[i]][0], positions[points[i]][1]);
                            }
                        }
                        cc.fill();

                        cc.stroke();
                        cc.closePath();
                        cc.filter = 'blur(0px)';

                    }

                    drawMouth(upperMouth);
                    drawMouth(bottomMouth);


                } else if (currentFilters[i].name === 'shadoweye') {
                    console.log(currentFilters);
                    var filter = findFilterByName('shadoweye');
                    cc.lineWidth = filter.lineWidth;
                    cc.strokeStyle = filter.color;
                    cc.globalAlpha = filter.alpha;

                    function drawLeftShadowEye() {
                        cc.beginPath();
                        cc.moveTo(positions[23][0] - 2, positions[23][1]);
                        cc.quadraticCurveTo(positions[27][0], positions[27][1] - 17 - filter.shadowRadius, positions[25][0], positions[25][1]);

                        cc.moveTo(positions[23][0] - 2, positions[23][1]);
                        cc.filter = 'blur(4px)';
                        cc.quadraticCurveTo(positions[27][0], positions[27][1] - 17 - 1, positions[25][0], positions[25][1]);

                        cc.stroke();
                        cc.closePath();
                        cc.filter = 'blur(0px)';

                    }

                    function drawRightShadowEye() {
                        cc.beginPath();
                        cc.moveTo(positions[28][0] + 2, positions[28][1]);
                        cc.quadraticCurveTo(positions[32][0], positions[32][1] - 17 - filter.shadowRadius, positions[30][0], positions[30][1]);
                        cc.moveTo(positions[28][0] + 2, positions[28][1]);
                        cc.quadraticCurveTo(positions[32][0], positions[32][1] - 17 - 1, positions[30][0], positions[30][1]);
                        cc.filter = 'blur(4px)'; 

                        cc.stroke();
                        cc.filter = 'blur(0px)';
                        cc.closePath();
                    }

                    drawLeftShadowEye();
                    drawRightShadowEye();
                    } 
                    else if (currentFilters[i].name === 'blush') {
                    console.log(currentFilters);
                    var filter = findFilterByName('blush');
                    cc.lineWidth = filter.lineWidth;
                    cc.strokeStyle = filter.color;
                    cc.globalAlpha = filter.alpha;

                    function drawRightShadowEye() {
                        cc.beginPath();
                        cc.moveTo(positions[13][0] + 2, positions[13][1]);
                        cc.quadraticCurveTo(positions[11][0], positions[11][1] - 17 - filter.shadowRadius, positions[38][0] + 40, positions[38][1]);

                        cc.filter = 'blur(15px)';
                        cc.stroke();
                        cc.moveTo(positions[1][0] + 2, positions[1][1]);
                        cc.quadraticCurveTo(positions[3][0], positions[3][1] - 17 - filter.shadowRadius, positions[36][0] - 40, positions[36][1]);
                        cc.stroke();

                        cc.filter = 'blur(0px)';
                    }
                    drawRightShadowEye();
                }
            }
        }
    }

    function toggleFilter(filter) {
        var index = currentFilters.indexOf(findFilterByName(filter));
        console.log(index);
        if (index !== -1) {
            currentFilters.splice(index, 1);
        } else {
            currentFilter = filter;
            currentFilters.push(findFilterByName(filter));
        }

        console.log(currentFilters);
        console.log(currentFilter);
    }

    function findFilterByName(filterName) {
        console.log(filterName);
        console.log(filters);
        var foundFilter = filters[filterName];

        if (foundFilter) {
            return foundFilter;
        } else {
            console.error('Filter not found:', filterName);
            return null;
        }
    }

    function updateColor(filter, value) {
        var filterElement = document.getElementById(filter + 'ColorPicker');
        findFilterByName(filter).color = value;
        filterElement.style.backgroundColor = value;
    }

    function updateLineWidth(filter, value) {
        if (currentFilter === filter) {
            findFilterByName(filter).lineWidth = parseInt(value);
        }
    }

    function updateAlpha(filter, value) {
        if (currentFilter === filter) {
            findFilterByName(filter).alpha = parseFloat(value);
        }
    }

    function updateExtension(filter, value) {
        if (currentFilter === filter) {
            findFilterByName(filter).extension = parseInt(value);
        }
    }

    function updateShadowEye(filter, value) {
        findFilterByName(filter).shadowRadius = parseInt(value);
    }

    function updateFilterButtons() {
        document.getElementById('eyelinerBtn').classList.remove('active-filter');
        document.getElementById('lipsBtn').classList.remove('active-filter');
        document.getElementById('shadoweyeBtn').classList.remove('active-filter');

        for (var i = 0; i < currentFilters.length; i++) {
            var filterBtnId = currentFilters[i] + 'Btn';
            document.getElementById(filterBtnId).classList.add('active-filter');
        }

        if (currentFilter !== '') {
            blinkElement(currentFilter + 'Btn');
        }
    }

    function blinkElement(elementId) {
        var element = document.getElementById(elementId);
        var originalColor = element.style.backgroundColor || '';
        var blinkInterval = setInterval(function () {
            element.style.backgroundColor = (element.style.backgroundColor === originalColor) ? 'transparent' : originalColor;
        }, 80);

        setTimeout(function () {
            clearInterval(blinkInterval);
            element.style.backgroundColor = originalColor;
        }, 3000);
    }

</script>
